name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  # Run all CI checks before creating release
  ci-stable:
    name: CI Stable Checks
    uses: ./.github/workflows/ci.yml

  create-release:
    name: Create Release
    needs: [ci-stable]  # Only create release if all tests pass
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if this is a pre-release (contains hyphen after version number)
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+- ]]; then
            echo "Creating pre-release for ${{ github.ref_name }}"
            gh release create "${{ github.ref_name }}" \
              --title "Release ${{ github.ref_name }}" \
              --notes "## Pre-Release ${{ github.ref_name }}" \
              --prerelease
          else
            echo "Creating stable release for ${{ github.ref_name }}"
            gh release create "${{ github.ref_name }}" \
              --title "Release ${{ github.ref_name }}" \
              --notes "## Release ${{ github.ref_name }}"
          fi

  build-release:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          # Native Linux builds on ubuntu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: false
          
          # ARM64 Linux builds using cross
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: true
          
          # Native macOS builds
          - os: macos-13  # Intel
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest  # ARM
            target: aarch64-apple-darwin
            use_cross: false
          
          # Native Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use_cross: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.90.0
        with:
          targets: ${{ matrix.target }}
      
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      
      - name: Install musl-tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      
      - name: Install cross (for cross-compilation)
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build with cross
        if: matrix.use_cross
        run: |
          cross build --release --target ${{ matrix.target }}
      
      - name: Build with cargo
        if: '!matrix.use_cross'
        run: |
          cargo build --release --target ${{ matrix.target }}
      
      - name: Package (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../nvd-support-car-${{ matrix.target }}.tar.gz nvd-support-car
          cd ../../../
          echo "ASSET_PATH=nvd-support-car-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
      
      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path nvd-support-car.exe -DestinationPath ../../../nvd-support-car-${{ matrix.target }}.zip
          cd ../../../
          echo "ASSET_PATH=nvd-support-car-${{ matrix.target }}.zip" >> $env:GITHUB_ENV
      
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ github.ref_name }}" "${{ env.ASSET_PATH }}" --clobber