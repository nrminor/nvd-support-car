name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  # Run all CI checks before creating release
  ci-stable:
    name: CI Stable Checks
    uses: ./.github/workflows/ci.yml

  create-release:
    name: Create Release
    needs: [ci-stable]  # Only create release if all tests pass
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes "## Release ${{ github.ref_name }}"

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write 
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            features: ""
            rustflags: ""
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
            features: ""
            rustflags: ""
            suffix: ""
          
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            features: ""
            rustflags: ""
            suffix: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            archive: tar.gz
            features: ""
            rustflags: ""
            suffix: ""
          
          # macOS Intel
          - os: macos-13  # Intel runner
            target: x86_64-apple-darwin
            archive: tar.gz
            features: ""
            rustflags: ""
            suffix: ""
          
          
          # macOS ARM64
          - os: macos-latest  # M1 runner
            target: aarch64-apple-darwin
            archive: tar.gz
            features: ""
            rustflags: ""
            suffix: ""
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            features: ""
            rustflags: ""
            suffix: ""
          
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            archive: zip
            features: ""
            rustflags: ""
            suffix: ""

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust (stable for standard builds)
        if: matrix.features == ''
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup uv
        if: matrix.os == 'ubuntu-latest'
        uses: astral-sh/setup-uv@v3
      
      - name: Install cargo-zigbuild
        if: matrix.os == 'ubuntu-latest'
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install ziglang
          cargo install --locked cargo-zigbuild
      
      - name: Build with cargo-zigbuild (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          source .venv/bin/activate
          cargo zigbuild --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      
      - name: Build with cargo (macOS)
        if: matrix.os != 'ubuntu-latest' && matrix.os != 'windows-latest'
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      
      - name: Build with cargo (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cargo build --release --target "${{ matrix.target }}"
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
      
      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf nvd-support-car-${{ matrix.target }}${{ matrix.suffix }}.tar.gz nvd-support-car
          mv nvd-support-car-${{ matrix.target }}${{ matrix.suffix }}.tar.gz ../../../
      
      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path nvd-support-car.exe -DestinationPath ../../../nvd-support-car-${{ matrix.target }}${{ matrix.suffix }}.zip
      
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release upload "${{ github.ref_name }}" \
            "./nvd-support-car-${{ matrix.target }}${{ matrix.suffix }}.${{ matrix.archive }}" \
            --clobber
