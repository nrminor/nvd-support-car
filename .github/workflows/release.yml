name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  # Run all CI checks before creating release
  ci-stable:
    name: CI Stable Checks
    uses: ./.github/workflows/ci.yml

  create-release:
    name: Create Release
    needs: [ci-stable]  # Only create release if all tests pass
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if this is a pre-release (contains hyphen after version number)
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+- ]]; then
            echo "Creating pre-release for ${{ github.ref_name }}"
            gh release create "${{ github.ref_name }}" \
              --title "Release ${{ github.ref_name }}" \
              --notes "## Pre-Release ${{ github.ref_name }}" \
              --prerelease
          else
            echo "Creating stable release for ${{ github.ref_name }}"
            gh release create "${{ github.ref_name }}" \
              --title "Release ${{ github.ref_name }}" \
              --notes "## Release ${{ github.ref_name }}"
          fi

  build-linux:
    name: Build Linux Targets
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl
      
      - name: Setup uv and cargo-zigbuild
        uses: astral-sh/setup-uv@v3
      
      - name: Install cargo-zigbuild
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install ziglang
          cargo install --locked cargo-zigbuild
      
      - name: Build all Linux targets
        run: |
          source .venv/bin/activate
          
          # Build each Linux target
          echo "Building x86_64-unknown-linux-gnu..."
          cargo zigbuild --release --target x86_64-unknown-linux-gnu
          
          echo "Building x86_64-unknown-linux-musl..."
          cargo zigbuild --release --target x86_64-unknown-linux-musl
          
          echo "Building aarch64-unknown-linux-gnu..."
          cargo zigbuild --release --target aarch64-unknown-linux-gnu
          
          echo "Building aarch64-unknown-linux-musl..."
          cargo zigbuild --release --target aarch64-unknown-linux-musl
      
      - name: Package all Linux binaries
        run: |
          # Package each built target
          for target in x86_64-unknown-linux-gnu x86_64-unknown-linux-musl aarch64-unknown-linux-gnu aarch64-unknown-linux-musl; do
            echo "Packaging $target..."
            cd target/$target/release
            tar czf ../../../nvd-support-car-$target.tar.gz nvd-support-car
            cd ../../../
          done
          
          # List all packages
          ls -la *.tar.gz
      
      - name: Upload Linux Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all Linux packages
          for file in nvd-support-car-*.tar.gz; do
            echo "Uploading $file..."
            gh release upload "${{ github.ref_name }}" "$file" --clobber
          done

  build-macos-intel:
    name: Build macOS Intel
    needs: create-release
    runs-on: macos-13  # Intel runner
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      
      - name: Build macOS Intel
        run: cargo build --release --target x86_64-apple-darwin
      
      - name: Package macOS Intel
        run: |
          cd target/x86_64-apple-darwin/release
          tar czf ../../../nvd-support-car-x86_64-apple-darwin.tar.gz nvd-support-car
      
      - name: Upload macOS Intel Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ github.ref_name }}" \
            "nvd-support-car-x86_64-apple-darwin.tar.gz" \
            --clobber

  build-macos-arm:
    name: Build macOS ARM
    needs: create-release
    runs-on: macos-latest  # ARM runner
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      
      - name: Build macOS ARM
        run: cargo build --release --target aarch64-apple-darwin
      
      - name: Package macOS ARM
        run: |
          cd target/aarch64-apple-darwin/release
          tar czf ../../../nvd-support-car-aarch64-apple-darwin.tar.gz nvd-support-car
      
      - name: Upload macOS ARM Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ github.ref_name }}" \
            "nvd-support-car-aarch64-apple-darwin.tar.gz" \
            --clobber

  build-windows:
    name: Build Windows Targets
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc, aarch64-pc-windows-msvc
      
      - name: Build Windows x86_64
        shell: pwsh
        run: cargo build --release --target x86_64-pc-windows-msvc
      
      - name: Build Windows ARM64
        shell: pwsh
        run: cargo build --release --target aarch64-pc-windows-msvc
      
      - name: Package Windows binaries
        shell: pwsh
        run: |
          # Package x86_64
          Write-Host "Packaging x86_64-pc-windows-msvc..."
          cd target/x86_64-pc-windows-msvc/release
          Compress-Archive -Path nvd-support-car.exe -DestinationPath ../../../nvd-support-car-x86_64-pc-windows-msvc.zip
          cd ../../../
          
          # Package ARM64
          Write-Host "Packaging aarch64-pc-windows-msvc..."
          cd target/aarch64-pc-windows-msvc/release
          Compress-Archive -Path nvd-support-car.exe -DestinationPath ../../../nvd-support-car-aarch64-pc-windows-msvc.zip
          cd ../../../
          
          # List packages
          Get-ChildItem *.zip
      
      - name: Upload Windows Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # Upload all Windows packages
          for file in nvd-support-car-*.zip; do
            echo "Uploading $file..."
            gh release upload "${{ github.ref_name }}" "$file" --clobber
          done